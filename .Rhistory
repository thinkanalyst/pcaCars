2+3
vec<-c(1,2,3,4,5,7)
vec
q()
q()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
{{GtkWidget}}
window <- NULL
copy.button.clicked <- function(button, user.data)
{
checkPtrType(user.data, "GtkWidget")
entry <- user.data
clipboard <- entry$getClipboard(GDK_SELECTION_CLIPBOARD)
clipboard$setText(entry$getText()) # copy all the text to the clipboard
}
paste.received <- function(clipboard, text, user.data)
{
checkPtrType(user.data, "GtkWidget")
entry <- user.data
entry$setText(text)
}
paste.button.clicked <- function(button, user.data)
{
checkPtrType(user.data, "GtkWidget")
entry <- user.data
clipboard <- entry$getClipboard(GDK_SELECTION_CLIPBOARD)
# Request the contents of the clipboard, paste.received will be
#   called when we do get the contents.
clipboard$requestText(paste.received, entry)
}
window <- gtkWindowNew("toplevel", show=F)
vbox <- gtkVBoxNew(FALSE, 0)
vbox$setBorderWidth(8)
window$add(vbox)
label <- gtkLabelNew("\"Copy\" will copy the text\nin the entry to the clipboard")
vbox$packStart(label, FALSE, FALSE, 0)
hbox <- gtkHBoxNew(FALSE, 4)
hbox$setBorderWidth(8)
vbox$packStart(hbox, FALSE, FALSE, 0)
# Create the first entry
entry <- gtkEntryNew()
hbox$packStart(entry, TRUE, TRUE, 0)
# Create the button
button <- gtkButtonNewFromStock("gtk-copy")
hbox$packStart(button, FALSE, FALSE, 0)
gSignalConnect(button, "clicked", copy.button.clicked, entry)
label <- gtkLabelNew("\"Paste\" will paste the text from the clipboard to the entry")
vbox$packStart(label, FALSE, FALSE, 0)
hbox <- gtkHBoxNew(FALSE, 4)
hbox$setBorderWidth(8)
vbox$packStart(hbox, FALSE, FALSE, 0)
# Create the second entry
entry <- gtkEntryNew()
hbox$packStart(entry, TRUE, TRUE, 0)
# Create the button
button <- gtkButtonNewFromStock("gtk-paste")
hbox$packStart(button, FALSE, FALSE, 0)
gSignalConnect(button, "clicked", paste.button.clicked, entry)
window$showAll()
function(button, user.data)
)
function(button, user.data)
0
checkPtrType(user.data, "GtkWidget")
function(button, user.data)
)
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
q()
install.packages("rmarkdown")
q()
load("E:/Sandip Data/Sandip-21-JULY-2014/Sandip/Personal-Docs-ID/Business-Analyst/EduPristine/EduPristine/New folder/.RData")
q()
library(help="stats")
window <- NULL
copy.button.clicked <- function(button, user.data)
{
checkPtrType(user.data, "GtkWidget")
entry <- user.data
clipboard <- entry$getClipboard(GDK_SELECTION_CLIPBOARD)
clipboard$setText(entry$getText()) # copy all the text to the clipboard
}
paste.received <- function(clipboard, text, user.data)
{
checkPtrType(user.data, "GtkWidget")
entry <- user.data
entry$setText(text)
}
paste.button.clicked <- function(button, user.data)
{
checkPtrType(user.data, "GtkWidget")
entry <- user.data
clipboard <- entry$getClipboard(GDK_SELECTION_CLIPBOARD)
# Request the contents of the clipboard, paste.received will be
#   called when we do get the contents.
clipboard$requestText(paste.received, entry)
}
window <- gtkWindowNew("toplevel", show=F)
vbox <- gtkVBoxNew(FALSE, 0)
vbox$setBorderWidth(8)
window$add(vbox)
label <- gtkLabelNew("\"Copy\" will copy the text\nin the entry to the clipboard")
vbox$packStart(label, FALSE, FALSE, 0)
hbox <- gtkHBoxNew(FALSE, 4)
hbox$setBorderWidth(8)
vbox$packStart(hbox, FALSE, FALSE, 0)
# Create the first entry
entry <- gtkEntryNew()
hbox$packStart(entry, TRUE, TRUE, 0)
# Create the button
button <- gtkButtonNewFromStock("gtk-copy")
hbox$packStart(button, FALSE, FALSE, 0)
gSignalConnect(button, "clicked", copy.button.clicked, entry)
label <- gtkLabelNew("\"Paste\" will paste the text from the clipboard to the entry")
vbox$packStart(label, FALSE, FALSE, 0)
hbox <- gtkHBoxNew(FALSE, 4)
hbox$setBorderWidth(8)
vbox$packStart(hbox, FALSE, FALSE, 0)
# Create the second entry
entry <- gtkEntryNew()
hbox$packStart(entry, TRUE, TRUE, 0)
# Create the button
button <- gtkButtonNewFromStock("gtk-paste")
hbox$packStart(button, FALSE, FALSE, 0)
gSignalConnect(button, "clicked", paste.button.clicked, entry)
window$showAll()
library(ggplot2)
library(rgdal)
library(mapview)
install.packages("ggplot2")
install.packages("rgdal")
install.packages("mapview")
library(ggplot2)
library(rgdal)
library(mapview)
data(diamonds)
big <- diamonds[rep(seq_len(nrow(diamonds)), 40), ]
big$cut <- as.character(big$cut)
big$color <- as.character(big$color)
big$clarity <- as.character(big$clarity)
big$x <- rnorm(nrow(big), 0, 10)
big$y <- rnorm(nrow(big), 0, 10)
coordinates(big) <- ~x+y
proj4string(big) <- CRS("+init=epsg:4326")
mapview(big)
library("RSQLite")
library("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RSQLite")
install.packages(c("ggplot2", "raster", "rgdal"))
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
dbWriteTable(con, "mtcars", mtcars)
dbListTables(con)
dbListFields(con, "mtcars")
dbReadTable(con, "mtcars")
# You can fetch all results:
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
dbFetch(res)
dbClearResult(res)
# Or a chunk at a time
res <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
# Clear the result
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
latest <- "http://www.sqlite.org/2015/sqlite-amalgamation-3080802.zip"
tmp <- tempfile()
download.file(latest, tmp)
unzip(tmp, exdir = "src/", junkpaths = TRUE)
unlink("src/shell.c")
net <- forceNetwork(Links = edges2, Nodes = nodes,
Source = "source", Target = "target",
NodeID = "label", Group = "cluster_name",
Value = "ne2", linkWidth = JS("function(d) { return Math.sqrt(d.value);}"),
Nodesize = "nn2", radiusCalculation = JS("Math.sqrt(d.nodesize)+6"),
colourScale = color_scale,
opacity = 1, linkColour = "#BBB", legend = TRUE,
linkDistance = 50, charge = -100, bounded = TRUE,
fontFamily = "Lato")
net
library("Rtools")
clearPushBack()
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
install.packages("ggplot2 ")
install.packages("ggplot2")
library(ISwR)
library(ISWR)
install.packages("iswar")
install.packages("ISwR")
library(ISwR)
plot(rnorm(1000))
rnorm(5)
rnorm(15)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
#manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
shiny::runApp('E:/Sandip Data/Sandip-21-JULY-2014/Sandip/Analysis/my_app-1')
c(5,5.5,6,6,6,6.5,6.5,6.5,6.5,7,7,8,8,9)
x<-c(5,5.5,6,6,6,6.5,6.5,6.5,6.5,7,7,8,8,9)
x
table(x)
table(X)
table(x)
plot(table(x))
n.cost<-c(4, 2, 1, 1, 0, 2, 1, 2, 4, 2, 5, 3, 1, 5, 1, 5, 1, 2, 1, 1, 3, 4, 2, 4, 3)
table''
table(n.cost)
plot(table(n.cost))
n.new<-c(as,as,sd,df,sd,as,fg,er1,rt)
n.new<-c(as,as,sd,df,sd,as,er1,rt)
n.new<-c(as,as,sd,df,sd,a,rt)
table(n.new)
work.hours<-c(5, 6, 3, 3, 2, 4, 7, 5, 2, 3, 5, 6, 5, 4, 4, 3, 5, 2, 5, 3)
table(work.hours)
plot(table(work.hours))
data.frame(table(work.hours))
plot(data.frame(table(work.hours)))
data.frame(table(work.hours))
freq<-table(work.hours)
freq
sum(freq)
freq/sum(freq)
sum(freq/sum(freq))
cumsum(freq/sum(freq))
par(mfrow=c(2.2))
par(mfrow=c(2,2))
q()
devtools::install_github(“56north/hexamapmaker”)
library(hexamapmaker)
devtools::install_github(“56north/hexamapmaker”)
install.packages("hexamapmaker")
install.packages("hexamapmaker")
devtools::install_github(“56north/hexamapmaker”)
devtools::install_github("56north/hexamapmaker")
library(hexamapmaker)
x <- c(1,3,2,4,1,3,7,8)
y <- c(1,1,3,3,5,5,1,3)
id <- c(“test1”, “test2”, “test3”, “test4”, “test5”, “test6”, “test7”, “test8″)
id <- c("test1", "test2", "test3", "test4", "test5", "test6", "test7", "test8")
z <- data.frame(id,x,y)
library(ggplot2)
ggplot(z, aes(x, y, group = id)) +
geom_point() +
coord_fixed(ratio = 1) +
ylim(0,max(y)) + xlim(0,max(x))
library(hexamapmaker)
zz <- hexamap(z)
ggplot(zz, aes(x, y, group = id)) +
geom_polygon(colour="black", fill = NA) +
coord_fixed(ratio = 1)
as.matrix(eurodist)[1:5, 1:5]
as.matrix(eurodist)[1:5, 1:5]
(mds <- cmdscale(eurodist))
plot(mds)
plot(mds, type = 'n')
plot(mds, type = 'n')
text(mds[, 1], mds[, 2], labels(eurodist))
library(ggplot2)
ggplot(as.data.frame(mds), aes(V1, -V2, label = rownames(mds))) +
+     geom_text(check_overlap = TRUE) + theme_minimal() + xlab('') + ylab('') +
+     scale_y_continuous(breaks = NULL) + scale_x_continuous(breaks = NULL)
ggplot(as.data.frame(mds), aes(V1, -V2, label = rownames(mds))) +
geom_text(check_overlap = TRUE) + theme_minimal() + xlab('') + ylab('') +
scale_y_continuous(breaks = NULL) + scale_x_continuous(breaks = NULL)
mds <- cmdscale(dist(mtcars))
plot(mds, type = 'n', axes = FALSE, xlab = '', ylab = '')
text(mds[, 1], mds[, 2], rownames(mds))
data.frame(table(ex.1$Position))
hist(ex.1$Position)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("RQuantLib")
require(RQuantLib)
# Generate all interesting dates
dates = as.Date(as.numeric(as.Date("2000-01-01")):as.numeric(as.Date("2050-01-01")))
# Get the end of month for each date
eom = getEndOfMonth("UnitedStates", dates)
# Get the last trading day, removing the last NA in the process
expi = head(eom[eom != lag.xts(eom, -1)], -1)
devtools::install_github("rstudio/addinexamples", type = "source")
devtools::install_github("rstudio/addinexamples", type = "source")
addinexamples:::reformatAddin()
addinexamples:::findAndReplaceAddin()
addinexamples:::subsetAddin()
install.packages(c("shiny", "miniUI"), type = "source")
install.packages(c("shiny", "miniUI"), type = "source")
updateR()
library(installr)
install.packages("installr")
install.packages("installr")
updateR()
library(installr)
setwd("~/GitHub/pcaCars")
pcaCars <- princomp(mtcars, cor = TRUE)
names(pcaCars)
summary(pcaCars)
plot(pcaCars, type = "l")
plot(pcaCars, type = "l")
plot(pcaCars, type = "l")
plot(pcaCars)
